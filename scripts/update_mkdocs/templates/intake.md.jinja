{#- mode: jinja -#}
{% if manifest.get('data_sources') or parser['kind'] or parser['category'] or parser['type'] %}
### Event Categories

{% if manifest.get('data_sources') %}
The following table lists the data source offered by this integration.

| Data Source | Description                          |
| ----------- | ------------------------------------ |
{% for data_source in manifest.get('data_sources', {}).keys() %}| `{{data_source}}` | {{manifest['data_sources'][data_source]}} |
{% endfor %}

{% endif %}

{% if parser['kind'] or parser['category'] or parser['type'] %}
In details, the following table denotes the type of events produced by this integration.

| Name | Values |
| ---- | ------ |
| Kind | `{{ parser['kind']|join('`, `') }}` |
| Category | `{{ parser['category']|join('`, `') }}` |
| Type | `{{ parser['type']|join('`, `') }}` |
{% endif %}
{% endif %}

{% if samples %}
### Raw Events Samples

In this section, you will find examples of raw logs as generated natively by the source. These examples are provided to help integrators understand the data format before ingestion into Sekoia.io. It is crucial for setting up the correct parsing stages and ensuring that all relevant information is captured.

{% for sample in samples %}
=== "{{sample['name']}}"
{% if is_sample_json %}

    ```json
	{% filter indent(width=4) %}
{{sample['content']}}
	{% endfilter %}
	```
{% else %}
    ```
	{% filter indent(width=4) %}
{{sample['content']}}
	{% endfilter %}
	```
{% endif %}

{% endfor %}
{% endif %}

{% if tests %}
### Transformed Events Samples after Ingestion

This section demonstrates how the raw logs will be transformed by our parsers. It shows the extracted fields that will be available for use in the [built-in detection rules](/docs/xdr/features/detect/rules_catalog) and hunting activities in the [events page](/docs/xdr/features/investigate/events). Understanding these transformations is essential for analysts to create effective detection mechanisms with [custom detection rules](/docs/xdr/features/detect/sigma) and to leverage the full potential of the collected data.
{% for test in tests %}
=== "{{test['name']}}"

    ```json
	{% filter indent(width=4) %}
{{test['content']}}
	{% endfilter %}
	```

{% endfor %}
{% endif %}

{% if parser['fields'] %}
### Extracted Fields

The following table lists the fields that are extracted, normalized under the ECS format, analyzed and indexed by the parser. It should be noted that infered fields are not listed.

| Name | Type | Description                |
| ---- | ---- | ---------------------------|
{% for field in parser['fields'] %}|`{{field['name']}}` | `{{field['type']}}` | {{field['short']}} |
{% endfor %}
{% endif %}

For more information on the Intake Format, please find the code of the Parser, Smart Descriptions, and Supported Events [here]({{"https://github.com/SEKOIA-IO/intake-formats/tree/main/" ~ repo_path}}).
